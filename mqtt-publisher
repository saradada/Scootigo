#!/usr/bin/env python3

import argparse
import logging

import cli_args as cli
from constants import SERIAL_PORT, BAUD_RATE, MQTT_HOST, LOG_LEVEL, TOPIC, DEVICE_ID, OOR_SIZE, OOR_TIME
from moving_average import MovingAverage
from mqtt_connection import MqttConnection, PAHO_CLIENT
from out_of_range_values import OutOfRangeValues
from serial_reader import SerialReader
from utils import setup_logging, waitForKeyboardInterrupt


logger = logging.getLogger(__name__)

TOLERANCE_THRESH = 2.5


def on_connect(mqtt_client, userdata, flags, rc):
    logger.info("Connected with result code: %s", rc)
    # mqtt_client.subscribe(userdata[COMMAND])


def fetch_data(value, userdata):
    print(value)

    # if abs(cm - avg) > TOLERANCE_THRESH:
    #    client.publish(topic, payload=str(cm).encode("utf-8"), qos=0)

    #if len(moving_avg) == moving_avg.max_size():
    client = userdata[PAHO_CLIENT]
    client.publish("ultrasonic", payload=value.encode("utf-8"), qos=0)
    #    moving_avg.clear()



if __name__ == "__main__":
    # Parse CLI args
    parser = argparse.ArgumentParser()
    cli.mqtt_host(parser)
    cli.device_id(parser)
    cli.serial_port(parser)
    cli.baud_rate(parser)
    cli.verbose(parser)
    args = vars(parser.parse_args())

    # Setup logging
    setup_logging(level=args[LOG_LEVEL])

    userdata = {}

    with SerialReader(func=fetch_data,
                      userdata=userdata,
                      port=SerialReader.lookup_port(args[DEVICE_ID]) if args.get(DEVICE_ID) else args[SERIAL_PORT],
                      baudrate=args[BAUD_RATE]):
        with MqttConnection(hostname=args[MQTT_HOST],
                           userdata=userdata,
                           on_connect=on_connect):
            waitForKeyboardInterrupt()

    logger.info("Exiting...")
